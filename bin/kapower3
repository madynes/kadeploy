#!/usr/bin/ruby -w

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'yaml'
require 'client'

Signal.trap("INT") do
  puts "\nSIGINT trapped, let's clean everything ..."
  Kadeploy::KapowerClient.kill() rescue nil
  exit!(1)
end

module Kadeploy

class KapowerClient < ClientWorkflow
  def self.operation()
    'Power operation'
  end

  def self.load_options()
    global_load_options().merge(
      {
        :operation => nil,
        :level => :soft,
        :wait => true,
      }
    )
  end

  def self.parse_options()
    global_parse_options() do |opt,options|
      opt.separator "General options:"
      parse_op_level(opt,options)
      opt.on("--off", "Shutdown the nodes") {
        options[:operation] = :off
      }
      opt.on("--on", "Power on the nodes") {
        options[:operation] = :on
      }
      opt.on("--status", "Get the status of the nodes") {
        options[:operation] = :status
      }
      opt.on("--no-wait", "Do not wait the end of the power operation") {
        options[:wait] = false
      }
    end
  end

  def self.check_options(options)
    return false unless super(options)

    if !options[:operation] or options[:operation].empty?
      error("No operation is chosen")
      return false
    end

    true
  end

  def run(options)
    raise 'Not implemented yet !'
  end
end

end

if __FILE__ == $0
  Kadeploy::KapowerClient.launch()
end
