#!/usr/bin/ruby -w

# Kadeploy 3.1
# Copyright (c) by INRIA, Emmanuel Jeanvoine - 2008-2011
# CECILL License V2 - http://www.cecill.info
# For details on use and redistribution please refer to License.txt

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'client'

Signal.trap("INT") do
  puts "\nSIGINT trapped, let's clean everything ..."
  KaenvClient.kill() rescue nil
  exit!(1)
end

API_DIR = '/environments'

class KaenvClient < Client
  def print_headers()
    #$stdout.puts "Name\t\tVersion\tUser\t\tDescription"
    printf("%-21s %-7s %-11s %.35s\n",'Name','Version','User','Description')
    printf("%-21s %-7s %-11s %.35s\n",'####','#######','####','###########')
  end

  def print_short(env)
    printf("%-21s %-7s %-11s %.35s%.3s\n", env['name'], env['version'], env['user'], env['description'],(env['description'].size>35 ? '...' : ''))
  end

  def print_full(env)
    env.delete('user')
    $stdout.puts env.to_yaml
    #YAML::quick_emit(env) do |out|
    #  out.map(env.taguri(), env.to_yaml_style()) do |map|
    #    env.keys.sort do |x,y|
    #      tmpx = YAML_SORT.index(x)
    #      tmpy = YAML_SORT.index(y)
    #      tmpx,tmpy = [x.to_s,y.to_s] if !tmpx and !tmpy
    #      (tmpx || max+1) <=> (tmpy || max+2)
    #    end.each{ |k| map.add(k, env[k]) }
    #    #content_hash.sort_by { |k,v| k }.each{ |t| map.add(t[0],t[1]) }
    #    #content_hash.keys.sort.each { |k| map.add(k, content_hash[k]) }
    #  end
    #end
  end

  def self.operation()
    'Environment management'
  end

  def self.load_options()
    {
      :environment => {},
      :operation => String.new,
      :env_desc => String.new,
      :env_name => String.new,
      :env_version => nil,
      :env_user => nil,
      :visibility_tag => String.new,
      :show_all_version => false,
      :files_to_move => Array.new,
      :get_version => false,
      :chosen_server => String.new,
      :servers => load_configfile(),
      :kadeploy_server => String.new,
      :kadeploy_server_port => String.new,
    }
  end

  def self.parse_options()
    options = load_options()
    opts = OptionParser::new do |opt|
      opt.summary_indent = "  "
      opt.summary_width = 38
      opt.banner = "Usage: kaenv3 [options]"
      opt.separator "Contact: #{CONTACT_EMAIL}"
      opt.separator ""
      opt.separator "General options:"
      opt.on("-a", "--add ENVFILE", "Add an environment") { |f|
        if tmp = load_envfile(f)
          options[:env_desc] = tmp
          options[:operation] = :add
        else
          return false
        end
      }
      opt.on("-d", "--delete ENVNAME", "Delete an environment") { |n|
        options[:env_name] = n
        options[:operation] = :delete
      }
      opt.on("-l", "--list", "List environments") {
        options[:operation] = :list
      }
      opt.on("-m", "--files-to-move FILES", "Files to move (src1:dst1,src2:dst2,...)") { |f|
        if /\A.+:.+(,.+:.+)*\Z/ =~f then
          f.split(",").each { |src_dst|
            options[:files_to_move].push({"src"=>src_dst.split(":")[0],"dest"=>src_dst.split(":")[1]})
          }
        else
          error("Invalid synthax for files to move")
          return false
        end
      }
      opt.on("-p", "--print ENVNAME", "Print an environment") { |n|
        options[:env_name] = n
        options[:operation] = :print
      }
      opt.on("-s", "--show-all-versions", "Show all versions of an environment") {
        options[:show_all_version] = true
      }
      opt.on("-t", "--visibility-tag TAG", "Set the visibility tag (private, shared, public)") { |v|
        if /\A(private|shared|public)\Z/ =~ v then
          options[:visibility_tag] = v
        else
          error("Invalid visibility tag")
        end
      }
      opt.on("-u", "--user USERNAME", "Specify the user") { |u|
        if /\A(\w+|\*)\Z/ =~ u then
          options[:env_user] = u
        else
          error("Invalid user name")
          return false
        end
      }
      opt.on("-v", "--version", "Get the version") {
        options[:get_version] = true
      }
      opt.on("--env-version NUMBER", "Specify the version") { |v|
        if /\A\d+\Z/ =~ v then
          options[:env_version] = v
        else
          error("Invalid version number")
          return false
        end
      }
      opt.on("--server STRING", "Specify the Kadeploy server to use") { |s|
        options[:chosen_server] = s
      }
      opt.separator "Advanced options:"
      opt.on("--remove-demolishing-tag ENVNAME", "Remove demolishing tag on an environment") { |n|
        options[:env_name] = n
        options[:operation] = :'remove-demolishing-tag'
      }
      opt.on("--set-visibility-tag ENVNAME", "Set the visibility tag on an environment") { |n|
        options[:env_name] = n
        options[:operation] = :'set-visibility-tag'
      }
      opt.on("--update-image-md5 ENVNAME", "Update the MD5 of the environment image") { |n|
        options[:env_name] = n
        options[:operation] = :'update-tarball-md5'
      }
      opt.on("--update-preinstall-md5 ENVNAME", "Update the MD5 of the environment preinstall") { |n|
        options[:env_name] = n
        options[:operation] = :'update-preinstall-md5'
      }
      opt.on("--update-postinstalls-md5 ENVNAME", "Update the MD5 of the environment postinstalls") { |n|
        options[:env_name] = n
        options[:operation] = :'update-postinstalls-md5'
      }
      opt.on("--move-files", "Move the files of the environments (for administrators only)") { |n|
        options[:operation] = :'move-files'
      }
    end

    begin
      opts.parse!(ARGV)
    rescue
      error("Option parsing error: #{$!}")
      return false
    end

    options[:chosen_server] = options[:servers]['default'] if options[:chosen_server].empty?
    options[:kadeploy_server] = options[:servers][options[:chosen_server]][0]
    options[:kadeploy_server_port] = options[:servers][options[:chosen_server]][1]

    return options
  end

  def self.check_options(options)
    case options[:operation]
    when :add
      if options[:env_desc].empty?
        error("You must choose a file that contains the environment description")
        return false
      end
    when :list

    when :delete, :print, :'update-tarball-md5', :'update-preinstall-md5', :'update-postinstalls-md5', :'remove-demolishing-tag'
      if options[:env_name].empty?
        error("You must choose an environment")
        return false
      end
    when :'set-visibility-tag'
      if options[:env_name].empty?
        error("You must choose an environment")
        return false
      end
      if options[:visibility_tag].empty?
        error("You must define the visibility value")
        return false
      end
    when :'move-files'
      if options[:files_to_move].empty?
        error("You must define some files to move")
        return false
      end
    else
      error("You must choose an operation")
      return false
    end

    return true
  end

  def run(options)
    params = {
      :user => USER, # TODO: improve security
    }

    # set path
    path = api_path()
    if options[:operation] == :add
      # Check if the environment contains local files
      localfiles = get_localfiles(options[:env_desc])
      # Serve local files throught HTTP(s)
      params[:client] = http_export_files(localfiles,options[:secure]) unless localfiles.empty?
    else
      if options[:operation] != :list
        path = File.join(path,options[:env_user]||USER)
        path = File.join(path,options[:env_name])
        path = File.join(path,options[:env_version]) if options[:env_version]
      else
        path = File.join(path,options[:env_user]) if options[:env_user]
      end
    end

    method = nil

    case options[:operation]
      when :add
        method = :POST
        params[:environment] = options[:env_desc]
      when :list
        method = :GET
      when :delete
        method = :DELETE
      when :print
        method = :GET
      when :'update-tarball-md5'
        method = :PUT
        path = File.join(path,'image')
      when :'update-postinstalls-md5'
        method = :PUT
        path = File.join(path,'postinstalls')
      when :'update-preinstall-md5'
        method = :PUT
        path = File.join(path,'preinstall')
      when :'set-visibility-tag'
        method = :PUT
      when :'remove-demolishing-tag'
        method = :PUT
      when :'move-files'
        method = :PUT
      else
        raise
    end

    params[:all_versions] = true if options[:show_all_version]

require 'pp'
    ret = nil
    case method
      when :GET
puts HTTPClient.path_params(path,params)
        ret = get(path,params)
      when :POST
puts path
pp params
        ret = post(path,params.to_json)
      when :PUT
puts path
pp params
        ret = put(path,params.to_json)
      when :DELETE
puts HTTPClient.path_params(path,params)
        ret = delete(path,params)
      else
        raise
    end
pp ret

    case options[:operation]
    when :list
      if ret.empty?
        $stdout.puts 'No environment has been found'
      else
        print_headers()
        ret.each do |env|
          print_short(env)
        end
      end
    when :print
      if ret.empty?
        $stdout.puts 'No environment has been found'
      else
        ret.each do |env|
          print_full(env)
        end
      end
    end
  end
end

if __FILE__ == $0
  KaenvClient.launch()
end
