#!/usr/bin/ruby -w

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/lib'
$:.unshift($kadeploy_libs)

Signal.trap("INT") do
  $stdout.puts "\nSIGINT trapped"
  Kadeploy::KadeployClient.kill() rescue nil
  exit!(1)
end

require 'kadeploy3/client'

module Kadeploy

class KadeployClient < ClientWorkflow
  def self.operation()
    'Deployment'
  end

  def self.load_options()
    global_load_options().merge(
      {
        :environment => {},
        :env_kind => '',
        :env_desc => {},
        :env_name => '',
        :env_version => nil, #By default we load the latest version
        :user => nil,
        :block_device => nil,
        :deploy_part => nil,
        :boot_part => nil,
        :key => nil,
        :reformat_tmp => nil,
        :pxe_profile => nil,
        :pxe_profile_singularities => nil,
        :pxe_files => [],
        :steps => [],
        :force => false,
        :disable_bootloader_install => nil,
        :disable_disk_partitioning => nil,
        :reboot_classical_timeout => nil,
        :reboot_kexec_timeout => nil,
        :vlan => nil,
        :secure => false,
      }
    )
  end

  def self.parse_options()
    global_parse_options() do |opt,options|
      opt.separator "General options:"
      add_opt(opt,"-a", "--env-file ENVFILE", "File containing the environment description") { |f|
        options[:env_kind] = :anonymous
        load_envfile(options[:env_desc],f)
      }
      parse_block_device(opt,options)
      add_opt(opt,"-c", "--boot-partition NUMBER", /^\d+$/, "Specify the number of the partition to boot on (use 0 to boot on the MBR)") { |c|
        options[:boot_part] = c.to_i
      }
      parse_env_name(opt,options){ options[:env_kind] = :database }
      parse_keyfile(opt,options)
      parse_deploy_part(opt,options)
      add_opt(opt,"-r", "--reformat-tmp FSTYPE", "Reformat the /tmp partition with the given filesystem type (this filesystem need to be supported by the deployment environment)") { |t|
        options[:reformat_tmp] = t
      }
      parse_user(opt,options)
      parse_vlan(opt,options)
      parse_pxe_profile(opt,options)
      parse_pxe_pattern(opt,options)
      parse_pxe_files(opt,options)
      parse_env_version(opt,options)
      opt.separator ""
      opt.separator "Advanced options:"
      add_opt(opt,"--disable-bootloader-install", "Disable the automatic installation of a bootloader for a Linux based environnment") {
        options[:disable_bootloader_install] = true
      }
      add_opt(opt,"--disable-disk-partitioning", "Disable the disk partitioning") {
        options[:disable_disk_partitioning] = true
      }
      parse_timeout_reboot(opt,options)
      add_opt(opt,"--reboot-kexec-timeout VALUE", "Overload the default timeout for kexec reboots (a ruby expression can be used, 'n' will be replaced by the number of nodes)") { |t|
        options[:reboot_kexec_timeout] = t
      }
      add_opt(opt,"--force-steps STRING", /^SetDeploymentEnv\|(?:\w+:\d+:\d+,?)+&BroadcastEnv\|(?:\w+:\d+:\d+,?)+&BootNewEnv\|(?:\w+:\d+:\d+,?)+$/,"Undocumented, for administration purpose only") { |s|
        options[:automata] = {}
        s.split("&").each do |macrostep|
          macroname = macrostep.split("|")[0]
          options[:automata][macroname] = []

          macrostep.split("|")[1].split(",").each do |instance|
            options[:automata][macroname] << {
              :name => instance.split(":")[0],
              :retries => instance.split(":")[1].to_i,
              :timeout => instance.split(":")[2].to_i,
            }
          end
        end
      }
      parse_secure(opt,options)
    end
  end

  def self.check_options(options)
    return false unless super(options)

    error('You must choose an environment') if options[:env_kind].empty?

    if !options[:pxe_files].empty? and !options[:pxe_profile]
      error('You must define a PXE boot profile if you want to push some files in the PXE repository')
    end

    true
  end

  def run(options)
    params = init_params(options)

    params[:environment] = {
      :kind => options[:env_kind],
    }

    params[:deploy_partition] = options[:deploy_part] if options[:deploy_part]
    params[:block_device] = options[:block_device] if options[:block_device]
    params[:boot_partition] = options[:boot_part] if options[:boot_part]
    params[:reformat_tmp_partition] = options[:reformat_tmp] if options[:reformat_tmp]
    params[:timeout_reboot_classical] = options[:reboot_classical_timeout] if options[:reboot_classical_timeout]
    params[:timeout_reboot_kexec] = options[:reboot_kexec_timeout] if options[:reboot_kexec_timeout]
    params[:disable_bootloader_install] = options[:disable_bootloader_install] if options[:disable_bootloader_install]
    params[:disable_disk_partitioning] = options[:disable_disk_partitioning] if options[:disable_disk_partitioning]
    if options[:pxe_profile]
      params[:pxe] = {}
      params[:pxe][:profile] = options[:pxe_profile]
      params[:pxe][:singularities] = options[:pxe_profile_singularities] if options[:pxe_profile_singularities]
      params[:pxe][:files] = options[:pxe_files] unless options[:pxe_files].empty?
    end
    params[:vlan] = options[:vlan] if options[:vlan]
    params[:automata] = options[:automata] if options[:automata]


    env = nil
    case options[:env_kind]
    when :database
      envname = options[:env_name]
      username = nil
      username = options[:user] if options[:user]

      envs = get(api_path(username,:envs),{:user=>USER})
      envs.select!{|en| en['name'] == envname}
      error("The environment '#{envname}' does not exist") if envs.size <= 0
      envs.sort_by!{|en| en['version']}

      if options[:env_version]
        envs.select!{|en| en['version'] == options[:env_version]}
        error("The environment '#{envname}' does not exist in version #{options[:env_version]}") if envs.size <= 0
        env = envs.first
      else
        env = envs.last
      end
      params[:environment][:user] = env['user']
      params[:environment][:name] = env['name']
      params[:environment][:version] = env['version']
    when :anonymous
      params[:environment].merge!(options[:env_desc])
      env = options[:env_desc]
    else
      raise
    end

    # Check if the environment contains local files
    add_localfiles(env)

    # Add the authorized_keys file
    if options[:key]
      params[:ssh_authorized_keys] = options[:key]
      add_localfiles(params[:ssh_authorized_keys])
    end

    # Add the PXE files
    add_localfiles(options[:pxe_files]) unless options[:pxe_files].empty?

    # Launch the workflow
    run_workflow(options,params)
  end
end

end

if __FILE__ == $0
  Kadeploy::KadeployClient.launch()
end
