#!/usr/bin/ruby -w

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'yaml'
require 'client'

Signal.trap("INT") do
  puts "\nSIGINT trapped, let's clean everything ..."
  Kadeploy::KarebootClient.kill() rescue nil
  exit!(1)
end

module Kadeploy

class KarebootClient < ClientWorkflow
  def self.operation()
    'Reboot operation'
  end

  def self.load_options()
    global_load_options().merge(
      {
        :operation => nil,
        :env_name => nil,
        :env_version => nil, #By default we load the latest version
        :check_demolishing => false,
        :block_device => nil,
        :deploy_part => nil,
        :pxe_profile => nil,
        :pxe_files => [],
        :pxe_profile_singularities => nil,
        :key => nil,
        :level => :soft,
        :wait => true,
        :reboot_classical_timeout => nil,
        :vlan => nil,
        :secure => false,
      }
    )
  end

  def self.parse_options()
    global_parse_options() do |opt,options|
      opt.separator "General options:"
      parse_block_device(opt,options)
      opt.on("-c", "--check-destructive-tag", "Check if some nodes was deployed with an environment that have the destructive tag") {
        options[:check_demolishing] = true
      }
      parse_env_name(opt,options){ options[:env_kind] = :database }
      parse_keyfile(opt,options)
      parse_op_level(opt,options)
      parse_deploy_part(opt,options)
      opt.on("-r", "--reboot-kind REBOOT_KIND", ['set_pxe', 'simple_reboot', 'deploy_env', 'env_recorded'], "Specify the reboot kind (set_pxe, simple_reboot, deploy_env, env_recorded)") { |k|
        options[:operation] = k.strip.downcase.to_sym
      }
      parse_user(opt,options)
      parse_vlan(opt,options)
      parse_pxe_profile(opt,options)
      parse_pxe_pattern(opt,options)
      parse_pxe_files(opt,options)
      parse_env_version(opt,options)
      opt.on("--no-wait", "Do not wait the end of the reboot") {
        options[:wait] = false
      }
      opt.on("--reboot-classical-timeout V", /^\d+$/, "Overload the default timeout for classical reboots") { |t|
        options[:reboot_classical_timeout] = t.to_i
      }
    end
  end

  def self.check_options(options)
    return false unless super(options)

    if !options[:operation] or options[:operation].empty?
      error("No operation is chosen")
      return false
    end

    case options[:operation]
    when :set_pxe
      if !options[:pxe_profile] or options[:pxe_profile].empty?
        error("The set_pxe reboot must be used with the -w option")
        return false
      end
    when :env_recorded
      if !options[:env_name] or options[:env_name].empty?
        error("An environment must be specified must be with the env_recorded kind of reboot")
        return false
      end
      unless options[:deploy_part]
        error("A partition number must be specified must be with the env_recorded kind of reboot")
        return false
      end
    end

    if options[:key] and options[:operation] != :deploy_env
      error("The -k option can be only used with the deploy_env reboot kind")
      return false
    end

    unless options[:wait]
      if options[:nodes_ok_file] or options[:nodes_ko_file]
        error("-o/--output-ok-nodes and/or -n/--output-ko-nodes cannot be used with --no-wait")
        return false
      end
      if options[:key]
        error("-k/--key cannot be used with --no-wait")
        return false
      end
    end

    true
  end

  def run(options)
    raise 'Not implemented yet !'
  end
end

end

if __FILE__ == $0
  Kadeploy::KarebootClient.launch()
end

