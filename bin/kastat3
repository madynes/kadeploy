#!/usr/bin/ruby -w

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'yaml'
require 'client'

Signal.trap("INT") do
  $stdout.puts "\nSIGINT trapped"
  Kadeploy::KastatClient.kill() rescue nil
  exit!(1)
end

module Kadeploy

class KastatClient < Client
  def self.operation()
    'Stats operation'
  end

  def self.load_options()
    global_load_options().merge(
      {
        :operation => nil,
        :date_min => 0,
        :date_max => 0,
        :min_retries => 0,
        :min_rate => 0,
        :steps => [],
        :fields => [],
        :workflow_id => nil,
      }
    )
  end

  def self.parse_options()
    global_parse_options() do |opt,options|
      opt.separator "General options:"
      opt.on("-a", "--list-min-retries NB", "Print the statistics about the nodes that need several attempts") { |n|
        options[:operation] = :list_retries
        begin
          options[:min_retries] = n.to_i
        rescue
          error("Invalid number of minimum retries, ignoring the option")
          return false
        end
      }
      opt.on("-b", "--list-failure-rate", "Print the failure rate for the nodes") { |n|
        options[:operation] = :list_failure_rate
      }
      opt.on("-c", "--min-failure-rate RATE", "Print the nodes which have a minimum failure-rate of RATE (0 <= RATE <= 100)") { |r|
        options[:operation] = :list_min_failure_rate
        begin
          options[:min_rate] = r.to_i
          raise unless (0..100).include?(options[:min_rate])
        rescue
          error("Invalid number for the minimum failure rate, ignoring the option")
          return false
        end
      }
      opt.on("-d", "--list-all", "Print all the information") {
        options[:operation] = :list_all
      }
      parse_machinefile(opt,options)
      opt.on("-F", "--fields FIELDS", Array, "Only print the selected fields (wid,user,hostname,step1,step2,step3,timeout_step1,timeout_step2,timeout_step3,retry_step1,retry_step2,retry_step3,start,step1_duration,step2_duration,step3_duration,env,md5,success,error)") { |f|
        # ['wid','user','hostname','step1','step2','step3','timeout_step1','timeout_step2','timeout_step3','retry_step1','retry_step2','retry_step3','start','step1_duration','step2_duration','step3_duration','env','md5','success','error']
        options[:fields] = f
      }
      opt.on("-l", "--last", "Only print the most recent information of selected machines") {
        options[:operation] = :list_last
      }
      parse_machine(opt,options)
      opt.on("-s", "--retry-step STEP", "Apply the retry filter on the given steps (1, 2 or 3)") { |s|
        options[:steps] << s
      }
      opt.on("-w", "--workflow-id ID", "Get the stats of a specific deployment") { |w|
        options[:operation] = :print_workflow
        options[:workflow_id] = w
      }
      opt.on("-x", "--date-min DATE", "Get the stats from this date (yyyy:mm:dd:hh:mm:ss)") { |d|
        options[:date_min] = d
      }
      opt.on("-y", "--date-max DATE", "Get the stats to this date") { |d|
        options[:date_max] = d
      }
    end
  end

  def self.check_options(options)
    true
  end

  def run(options)
    params = init_params(options)
    params[:nodes] = options[:nodes]

    get(api_path(),params)
  end

  def result(options,ret)
    ret.each do |line|
      debug line.join(',')
    end
  end
end

end

if __FILE__ == $0
  Kadeploy::KastatClient.launch()
end

