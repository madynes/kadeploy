introduction do
  section "Request's parameters" do
	  paragraph "There is several ways to specify parameters when using the network API. Parameters can be specified in the query's URI parameter but also in the query's body. Remark: it's only possible to use String and Array data structures when specifying parameters using the query's URI to specify more advanced parameters (Numbers, Hashs, ...) it's necessary to specify the parameters using a more advanced description language (JSON/YAML) in the query's body."
    paragraph "The following examples are equivalent:"
    paragraph $cgi.b{"Specifying parameters in the query's URI"}
    str=<<-EOS
      POST /deploy?user=frontent&nodes=node-1.testbed.lan&nodes=node-2.testbed.lan HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
    EOS
    paragraph "#{$cgi.pre{str}}"

    paragraph $cgi.b{"Specifying parameters in the query's body"}
    paragraph "JSON body"
    str=<<-EOS
      POST /deploy HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
      Content-Type: application/json
      Content-Length: 93
      {
        "user": "frontend",
        "nodes": [
          "node-1.testbed.lan",
          "node-2.testbed.lan"
        ]
      }
    EOS
    paragraph "#{$cgi.pre{str}}"

    paragraph "YAML body"
    str=<<-EOS
      POST /deploy HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
      Content-Type: application/x-yaml
      Content-Length: 70
      ---
      user: frontend
      nodes:
      - node-1.testbed.lan
      - node-2.testbed.lan
    EOS
    paragraph "#{$cgi.pre{str}}"
  end

  section "Output type and encoding" do
    paragraph "The Kadeploy server can respond to a request in different formats: JSON and YAML, with or without compression (gzip only)."
    paragraph "The response format depends on the value of the 'Accept' HTTP header of the request. By default (if it's set to */*) the response will be formated in JSON otherwise it will use the specified format."
    paragraph "The response encoding (compression) depends on the value of the 'Accept-Encoding' HTTP header. By default (if it's not set or set to */*) the response will not be compressed, otherwise it will be compressed using the gzip algorithm."

    paragraph "Here are some examples:"
    paragraph "JSON response"
    str=<<-EOS
      GET /nodes HTTP/1.1
      Accept: application/json
      Host: kadeploy.testbed.lan:25300
    EOS
    paragraph "#{$cgi.pre{str}}"
    str=<<-EOS
      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Length: 50
      [
        "node-1.testbed.lan",
        "node-2.testbed.lan"
      ]
    EOS
    paragraph "#{$cgi.pre{str}}"

    paragraph "YAML response"
    str=<<-EOS
      GET /nodes HTTP/1.1
      Accept: application/x-yaml
      Host: kadeploy.testbed.lan:25300
    EOS
    paragraph "#{$cgi.pre{str}}"
    str=<<-EOS
      HTTP/1.1 200 OK
      Content-Type: application/x-yaml
      Content-Length: 47
      ---
      - node-1.testbed.lan
      - node-2.testbed.lan
    EOS
    paragraph "#{$cgi.pre{str}}"

    paragraph "Compressed JSON response"
    paragraph "YAML response"
    str=<<-EOS
      GET /nodes HTTP/1.1
      Accept: application/x-yaml
      Accept-Encoding: gzip
      Host: kadeploy.testbed.lan:25300
    EOS
    paragraph "#{$cgi.pre{str}}"
    str=<<-EOS
      HTTP/1.1 200 OK
      Content-Type: application/json
      Content-Encoding: gzip
      Content-Length: 52
      ...BINARY_DATA...
    EOS
    paragraph "#{$cgi.pre{str}}"
  end

  section "Global parameters" do
    paragraph "Some parameters are mendatory, they have to be precised in each request as parameter. Here is a list of them: #{['user'].collect{|v|$cgi.i{v}}.join(', ')}."
  end

  section "API path notation" do
  end

  section 'Authentication' do
    paragraph "To access API resources an authentication is needed. There is tree different methods to authenticate when accessing a ressource. Depending on the server's configuration it will be possible to use one of this methods."
    paragraph $cgi.b{'Authentication using the IDENT protocol'}
    paragraph "The first authentication method is based on the IDENT protocol. When a request will be received on the server, it will first check if the request is coming from a trusted machine then it will contact the IDENT server of this machine in order to be sure that the user specified in the 'user' request's parameter is actually corresponding to the user on the machine that initiated the request. In order to be authenticated with this method, no extra parameters have to be providen, an IDENT server just have to be set up on the machine that is used to initiate the request."
    paragraph $cgi.b{'Authentication by password'}
    paragraph "The second authentication method is the authentication by password (from trusted machines). In order to authenticate with such a method it's necessary to specify the password in the 'secret_key' request parameter. Here is some examples:"
    str=<<-EOS
      GET /nodes?user=frontend&secret_key=mypassword HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
    EOS
    paragraph "#{$cgi.pre{str}}"
    str=<<-EOS
      GET /nodes?user=frontend HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
      Content-Type: application/json
      Content-Length: 32
      {
        "secret_key": "mypassword"
      }
    EOS
    paragraph "#{$cgi.pre{str}}"
    paragraph $cgi.b{'Authentication by certificate'}
    paragraph "To be able to authenticate using a (x509) certificate it's necessary to provide an x509 certificate that was signed with the server's private key in the field 'cert'. Here is an example:"
    str=<<-EOS
      GET /nodes?user=frontend HTTP/1.1
      Accept: */*
      Host: kadeploy.testbed.lan:25300
      Content-Type: application/x-yaml
      Content-Length: 1561
      ---
      cert: |-
        -----BEGIN CERTIFICATE-----
        MIIEIzCCAwugAwIBAgIBGTANBgkqhkiG9w0BAQUFADBiMQswCQYDVQQGEwJVUzET
        MBEGA1UEChMKQXBwbGUgSW5jLjEmMCQGA1UECxMdQXBwbGUgQ2VydGlmaWNhdGlv
        ...
        zJEdOusjWv6lLZf3e7vWh0ZChetSPSayY6i0scqP9Mzis8hH4L+aWYP62phTKoL1
        fGUuldkzXfXtZcwxN8VaBOhr4eeIA0p1npsoy0pAiGVDdd3LOiUjxZ5X+C7O0qmS
        XnMuLyV1FQ==
        -----END CERTIFICATE-----
    EOS
    paragraph "#{$cgi.pre{str}}"
  end

  section 'Errors management' do
    paragraph "Two kind of errors will be returned by the service: classical HTTP errors (Unauthorized, Forbidden, Not Found, ...) and Kadeploy specific errors."

    paragraph "Classical HTTP errors will be return fitting with the HTTP 1.1 standards, an error message will be add in the body of the response."

    paragraph "Kadeploy errors will be returned using the HTTP return code 400 (Bad Request) plus some (non-standard) HTTP header: X-Application-Error-Code and X-Application-Error-Info. The header X-Application-Error-Code will contain a Kadeploy specific error code while the header X-Application-Error-Info contains a (Base64 encoded) error message. The Kadeploy specific error codes are described in the following."
    paragraph "Here is an example of a Kadeploy specific error response:" 
    str=<<-EOS
      HTTP/1.1 400 Bad Request
      X-Application-Error-Code: 6
      X-Application-Error-Info: WW91IGRvIG5vdCBoYXZlIHN1ZmZpY2llbnQgcmlnaHRzIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvbiBhbGwgdGhlIG5vZGVz
      Content-Type: text/plain
      Content-Length: 75
      You do not have sufficient rights to perform the operation on all the nodes
    EOS
    paragraph "#{$cgi.pre{str}}"

    paragraph $cgi.b{'Kadeploy error codes'}
    list=[]
    list << ["1", 'INVALID_WORKFLOW_ID', "Invalid workflow ID"]
    list << ["2", 'INVALID_NODELIST', "Invalid node list"]
    list << ["3", 'INVALID_CLIENT', "Invalid client's export"]
    list << ["4", 'INVALID_OPTION', "Invalid option in the request"]
    list << ["5", 'INVALID_FILE', "Invalid file"]
    list << ["6", 'INVALID_RIGHTS', "You do not have sufficient rights to perform the operation on all the nodes"]
    list << ["7", 'INVALID_ENVIRONMENT', "Invalid environment specification"]
    list << ["8", 'INVALID_CUSTOMOP', "Invalid custom operations specification"]
    list << ["9", 'INVALID_VLAN', "Invalid VLAN"]
    list << ["10", 'EXISTING_ELEMENT', "Element already exists"]
    list << ["11", 'CONFLICTING_ELEMENTS', "Some elements already exists and are conflicting"]
    list << ["13", 'CONFLICTING_OPTIONS', "Some options are conflicting"]
    list << ["12", 'MISSING_OPTION', "Some options are missing"]
    list << ["14", 'NOTHING_MODIFIED', "No element has been modified"]
    list << ["20", 'DATABASE_ERROR', "Database issue"]
    list << ["21", 'CACHE_ERROR', "Something went wront with the cache system"]
    list << ["22", 'CACHE_FULL', "The cache is full"]
    list << ["30", 'DESTRUCTIVE_ENVIRONMENT', "Cannot reboot since the last deployed environment was destructive"]
    list.collect!{|v|$cgi.tr{"#{$cgi.td{v[0]}}#{$cgi.td{v[1]}}#{$cgi.td{v[2]}}"}}
    paragraph $cgi.table(:style => 'margin-left: 40px;'){$cgi.tr{"#{$cgi.th{'Error #'}}#{$cgi.th{'Name'}}#{$cgi.th{'Description'}}"}+list.join}
  end
  section 'Workflow based operations', 'workflow_operations' do
    paragraph 'specific resources: /output, /debug (as timestamp|message), ...'
  end
  section 'Exporting files for the server','file_export' do
    paragraph 'local://, server://, http://'
  end
end
