#!/usr/bin/ruby -w

# Kadeploy 3.1
# Copyright (c) by INRIA, Emmanuel Jeanvoine - 2008-2011
# CECILL License V2 - http://www.cecill.info
# For details on use and redistribution please refer to License.txt

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'client'

Signal.trap("INT") do
  puts "\nSIGINT trapped, let's clean everything ..."
  KaenvClient.kill() rescue nil
  exit!(1)
end

class KarightsClient < Client
  def print_headers()
    #$stdout.puts "Name\t\tVersion\tUser\t\tDescription"
    printf("%-15s %-41s %s\n",'User','Node','Partitions')
    printf("%-15s %-41s %s\n",'####','####','##########')
  end

  def print_rights(user,node,parts)
    printf("%-15s %-41s %s\n", user, node, parts.join(','))
  end

  def self.operation()
    'Rights management'
  end

  def self.load_options()
    {
      :operation => String.new,
      :user => nil,
      :nodes => Array.new,
      :parts => Array.new,
      :overwrite => false,
      :get_version => false,
      :chosen_server => String.new,
      :servers => load_configfile(),
      :kadeploy_server => String.new,
      :kadeploy_server_port => String.new,
    }
  end

  def self.parse_options()
    options = load_options()
    opts = OptionParser::new do |opt|
      opt.summary_indent = "  "
      opt.summary_width = 28
      opt.banner = "Usage: karights3 [options]"
      opt.separator "Contact: #{CONTACT_EMAIL}"
      opt.separator ""
      opt.separator "General options:"
      opt.on("-a", "--add", "Add some rights to a user") {
        options[:operation] = :add
      }
      opt.on("-d", "--delete", "Delete some rights to a user") {
        options[:operation] = :delete
      }
      opt.on("-f", "--file FILE", "Machine file (- means stdin)")  { |f|
        load_machinefile(options[:nodes], f)
      }
      opt.on("-m", "--machine MACHINE", "Include the machine in the operation") { |h|
        h.strip!
        load_machine(options[:nodes], h) if h != '*'
      }
      opt.on("-o", "--overwrite-rights", "Overwrite existing rights") {
        options[:overwrite] = true
      }
      opt.on("-p", "--part PARTNAME", "Include the partition in the operation") { |p|
        p.strip!
        options[:parts] << p if p != '*'
      }
      opt.on("-s", "--show-rights", "Show the rights for a given user") {
        options[:operation] = :show
      }
      opt.on("-u", "--user USERNAME", "Specify the user") { |u|
        if /\A\w+\Z/ =~ u then
          options[:user] = u
        else
          error("Invalid user name")
          return false
        end
      }
      opt.on("-v", "--version", "Get the version") {
        options[:get_version] = true
      }
      opt.on("--server STRING", "Specify the Kadeploy server to use") { |s|
        options[:chosen_server] = s
      }
    end

    begin
      opts.parse!(ARGV)
    rescue
      error("Option parsing error: #{$!}")
      return false
    end

    options[:chosen_server] = options[:servers]['default'] if options[:chosen_server].empty?
    options[:kadeploy_server] = options[:servers][options[:chosen_server]][0]
    options[:kadeploy_server_port] = options[:servers][options[:chosen_server]][1]

    return options
  end

  def self.check_options(options)
    unless [:add,:show,:delete].include?(options[:operation])
      error("You must choose an operation")
      return false
    end

    if options[:operation] != :show and !options[:user]
      error('You must choose a user')
      return false
    end

    return true
  end

  def run(options)
    params = {
      :user => USER,
      :username => options[:user],
    }

    params[:overwrite] = true if options[:overwrite]

    path = api_path()
    method = nil
    case options[:operation]
      when :add
        method = :POST
        params[:nodes] = options[:nodes] if !options[:nodes].empty?
        params[:partitions] = options[:parts] if !options[:parts].empty?
      when :show
        method = :GET
        path = File.join(path,options[:user]) if options[:user]
      when :delete
        method = :DELETE
        path = File.join(path,options[:user])
        params[:nodes] = options[:nodes] if !options[:nodes].empty?
        params[:partitions] = options[:parts] if !options[:parts].empty?
      else
        raise
    end

    ret = nil
    case method
      when :GET
        ret = get(path,params)
      when :POST
        ret = post(path,params.to_json)
      when :PUT
        ret = put(path,params.to_json)
      when :DELETE
        ret = delete(path,params)
      else
        raise
    end

    case options[:operation]
    when :show
      print_headers()
      ret.each do |user,nodes|
        nodes.each do |node,parts|
          print_rights(user,node,parts)
        end
      end
    end
  end
end

if __FILE__ == $0
  KarightsClient.launch()
end
