#!/usr/bin/ruby -w


$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'

$:.unshift($kadeploy_libs)

require 'optparse'
require 'client'

Signal.trap("INT") do
  $stdout.puts "\nSIGINT trapped"
  Kadeploy::KarightsClient.kill() rescue nil
  exit!(1)
end

module Kadeploy

class KarightsClient < Client
  def print_headers()
    debug sprintf("%-15s %-41s %s\n",'User','Node','Partitions')
    debug sprintf("%-15s %-41s %s\n",'####','####','##########')
  end

  def print_rights(user,node,parts)
    debug sprintf("%-15s %-41s %s\n", user, node, parts.join(','))
  end

  def self.operation()
    'Rights management'
  end

  def self.load_options()
    global_load_options().merge(
      {
        :operation => nil,
        :user => nil,
        :parts => [],
        :overwrite => false,
      }
    )
  end

  def self.parse_options()
    global_parse_options() do |opt,options|
      opt.separator "General options:"
      opt.on("-a", "--add", "Add some rights to a user") {
        options[:operation] = :add
      }
      opt.on("-d", "--delete", "Delete some rights to a user") {
        options[:operation] = :delete
      }
      parse_machinefile(opt,options)
      opt.on("-l", "--list", "List the rights for a given user") {
        options[:operation] = :show
      }
      opt.on("-m", "--machine MACHINE", "Include the machine in the operation") { |h|
        h.strip!
        load_machine(options[:nodes], h) if h != '*'
      }
      opt.on("-o", "--overwrite-rights", "Overwrite existing rights") {
        options[:overwrite] = true
      }
      opt.on("-p", "--part PARTNAME", "Include the partition in the operation") { |p|
        p.strip!
        options[:parts] << p if p != '*'
      }
      opt.on("-u", "--user USERNAME", /^\w+$/, "Specify the user") { |u|
        options[:user] = u
      }
    end
  end

  def self.check_options(options)
    unless [:add,:show,:delete].include?(options[:operation])
      error("You must choose an operation")
      return false
    end

    case options[:operation]
    when :show
      if !options[:nodes].empty?
        error('Node list is useless when showing rights of a specific user')
        return false
      end
    else
      unless options[:user]
        error('You must choose a user')
        return false
      end
    end

    return true
  end

  def run(options)
    params = { :user => USER }

    params[:overwrite] = true if options[:overwrite]

    path = api_path()
    method = nil
    case options[:operation]
      when :add
        method = :POST
        params[:username] = options[:user]
        params[:nodes] = nodes() if nodes()
        params[:partitions] = options[:parts] if !options[:parts].empty?
      when :show
        method = :GET
        path = File.join(path,options[:user]) if options[:user]
      when :delete
        method = :DELETE
        path = File.join(path,options[:user])
        params[:nodes] = nodes() if nodes()
        params[:partitions] = options[:parts] if !options[:parts].empty?
      else
        raise
    end

    ret = nil
    case method
      when :GET
        ret = get(path,params)
      when :POST
        ret = post(path,params)
      when :PUT
        ret = put(path,params)
      when :DELETE
        ret = delete(path,params)
      else
        raise
    end

    case options[:operation]
    when :show
      print_headers()
      ret.each do |user,nodes|
        nodes.each do |node,parts|
          print_rights(user,node,parts)
        end
      end
    end
  end
end

end

if __FILE__ == $0
  Kadeploy::KarightsClient.launch()
end
