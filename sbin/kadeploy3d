#!/usr/bin/ruby -w

# Kadeploy 3.1
# Copyright (c) by INRIA, Emmanuel Jeanvoine - 2008-2012
# CECILL License V2 - http://www.cecill.info
# For details on use and redistribution please refer to License.txt

$kadeploy_libs=ENV['KADEPLOY3_LIBS']||'/usr/local/kadeploy3/src/lib'
$kadeploy_config_directory=ENV['KADEPLOY3_CONFIG_DIR']||'/etc/kadeploy3'

$:.unshift($kadeploy_libs)


Signal.trap("INT") do
  puts "\nSIGINT trapped, let's clean everything ..."
  $kadeploy.kill()
  $httpd.shutdown
  exit!(1)
end

Signal.trap("TERM") do
  puts "\nSIGINT trapped, let's clean everything ..."
  $kadeploy.kill()
  $httpd.shutdown
  exit!(1)
end


require 'webrick'
require 'webrick/https'
require 'socket'
require 'json'

require 'server'
require 'config'

include WEBrick

# Disable reverse lookup to prevent lag in case of DNS failure
Socket.do_not_reverse_lookup = true

$kadeploy = KadeployServer.new()

$httpd = HTTPServer.new(
  :Port=>$kadeploy.port,
  #:DocumentRoot=>'/tmp/',
  :SSLEnable => true,
  :SSLCertName => [['CN',$kadeploy.host]]
)

$httpd.mount_proc('/version') do |request,response|
  response.status = 200
  resp = { :version => $kadeploy.get_version }.to_json
  response.content_length=resp.size
  response['Content-Type'] = 'application/json'
  response.body = resp
end

$httpd.mount_proc('/info') do |request,response|
  response.status = 200
  resp = $kadeploy.get_users_info.to_json
  response.content_length=resp.size
  response['Content-Type'] = 'application/json'
  response.body = resp
end

$httpd.mount_proc('/nodes') do |request,response|
  response.status = 200
  resp = $kadeploy.get_nodes.to_json
  response.content_length=resp.size
  response['Content-Type'] = 'application/json'
  response.body = resp
end

$httpd.start

### SSH-AGENT and SYSLOG ????? ###
=begin
PID=0
Exit_handler_int()
{
  if [ -n "$SSH_AGENT_PID" ]
  then
    ssh-agent -k 1>/dev/null
  fi
}
Exit_handler_kill()
{
  if [ -n "$SSH_AGENT_PID" ]
  then
    ssh-agent -k 1>/dev/null
  fi
  kill -9 $PID
}

Exit_handler_term()
{
  if [ -n "$SSH_AGENT_PID" ]
  then
    ssh-agent -k 1>/dev/null
  fi
  kill -15 $PID
}

if [ -x /etc/kadeploy3/load_kadeploy_env ] && [ -z "${KADEPLOY_CONFIG_DIR}" ]
then
    KADEPLOY_CONFIG_DIR=/etc/kadeploy3
    export KADEPLOY_CONFIG_DIR
elif [ ! -x $KADEPLOY_CONFIG_DIR/load_kadeploy_env ]
then
    echo "The Kadeploy environment cannot be loaded, please check your configuration"
    exit 1
fi

unset http_proxy
source $KADEPLOY_CONFIG_DIR/load_kadeploy_env

# Launch an ssh agent (useful when deploying from production environment)
if [ -e $KADEPLOY_CONFIG_DIR/keys/id_deploy ]
then
  eval $(ssh-agent) &>/dev/null
  ssh-add $KADEPLOY_CONFIG_DIR/keys/id_deploy
fi

if [ -e `which logger` ]
then
  ruby $KADEPLOY_INSTALL_DIR/src/kadeploy_server.rb "$@" 2> >(logger -s -t "$(basename ${0})-error") &
else
  ruby $KADEPLOY_INSTALL_DIR/src/kadeploy_server.rb "$@" &
fi
PID=$!
trap Exit_handler_int INT
trap Exit_handler_term TERM
trap Exit_handler_kill KILL

wait

# Clean the ssh agent stuff
if [ -n "$SSH_AGENT_PID" ]
then
  ssh-agent -k 1>/dev/null
  rm -rf `dirname $SSH_AUTH_SOCK`
fi

exit 0
=end
