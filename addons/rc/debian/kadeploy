#! /bin/sh
### BEGIN INIT INFO
# Provides:          kadeploy
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Kadeploy server initscript
# Description:       Kadeploy: the cluster deployment tool - server part
### END INIT INFO

# Author: Kadeploy developers <kadeploy3-devel@lists.gforge.inria.fr>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Kadeploy Server"
NAME=kadeploy
DAEMON_NAME=kadeploy3d
DAEMON=/usr/sbin/${DAEMON_NAME}
RUNDIR=/var/run/${DAEMON_NAME}
PIDFILE=$RUNDIR/${DAEMON_NAME}.pid
DAEMON_ARGS="--pidfile $PIDFILE --detach"
DAEMON_USER=deploy
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	[ -d $RUNDIR ] || (mkdir $RUNDIR && chown $DAEMON_USER $RUNDIR)
	[ -e $PIDFILE ] && [ -e /proc/`cat $PIDFILE` ] && return 1
	start-stop-daemon --start --quiet --chuid $DAEMON_USER --exec $DAEMON -- $DAEMON_ARGS \
		|| return 2
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $DAEMON_NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
        # Remove the PID file if the process was killed using SIGKILL
        [ -e $PIDFILE ] && rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload()
{
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	rm -f $RUNDIR/reload
	start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE --name $DAEMON_NAME
	# Wait for the reload operation to finish
	while [ ! -f $RUNDIR/reload ]; do sleep 1; done
	# Display reload messages/errors
	sed '1d' $RUNDIR/reload >&2
	return 0
}
EXITSTATUS=0
case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0) [ "$VERBOSE" != no ] && log_end_msg 0;;
		1) EXITSTATUS=1 && [ "$VERBOSE" != no ] && log_end_msg 0;;
		2) EXITSTATUS=2 && [ "$VERBOSE" != no ] && log_end_msg 1;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0) [ "$VERBOSE" != no ] && log_end_msg 0;;
		1) EXITSTATUS=1 && [ "$VERBOSE" != no ] && log_end_msg 0;;
		2) EXITSTATUS=2 && [ "$VERBOSE" != no ] && log_end_msg 1;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" || EXITSTATUS=$?
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0;;
			1) EXITSTATUS=1 && log_end_msg 1;; # Old process is still running
			*) EXITSTATUS=2 && log_end_msg 1;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		EXITSTATUS=2 && log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	EXITSTATUS=3
	;;
esac
exit $EXITSTATUS
