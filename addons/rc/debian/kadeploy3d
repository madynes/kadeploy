#! /bin/sh
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Emmanuel Jeanvoine <emmanuel.jeanvoine@inria.fr>


# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="Kadeploy Server"
NAME=kadeploy3d
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$NAME.pid
DAEMON_ARGS="--pidfile $PIDFILE"
SCRIPTNAME=/etc/init.d/$NAME
DAEMON_USER=deploy

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
        [ -e $PIDFILE ] && [ -e /proc/`cat $PIDFILE` ] && echo "Daemon already running" && return 1
        [ -e $PIDFILE ] || ( touch $PIDFILE && chown $DAEMON_USER:$DAEMON_USER $PIDFILE )
        start-stop-daemon --start --quiet --exec $DAEMON --test -- $DAEMON_ARGS > /dev/null || return 1
        start-stop-daemon --start --quiet --exec $DAEMON --chuid $DAEMON_USER -- $DAEMON_ARGS > /dev/null || return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	sleep 1 && [ -e /proc/`cat $PIDFILE` ] || (rm $PIDFILE ;return 2)
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	log_action_begin_msg "Starting $DESC"
	do_start
	case "$?" in
		0|1) log_action_end_msg 0 ;;
		2) log_action_end_msg 1;; #log_daemon_msg "An error occured, probably a configuration issue, please check your syslog file." ;;
	esac
	;;
  stop)
	log_action_begin_msg "Stopping $DESC"
	do_stop
	case "$?" in
		0|1) log_action_end_msg 0 ;;
		2) log_action_end_msg 1 ;;
	esac
	;;
  restart)
	log_action_begin_msg "Restarting $DESC"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_action_end_msg 0 ;;
			1) log_action_end_msg 1 ;; # Old process is still running
			*) log_action_end_msg 1;; # log_daemon_msg "An error occured, probably a configuration issue, please check your syslog file." ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  status)
        status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|status}" >&2
	exit 3
	;;
esac

:
