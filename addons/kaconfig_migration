#!/usr/bin/ruby

require 'yaml'
require 'fileutils'

KAUSER='deploy'
KAGROUP='deploy'

PARTITION_FILE_PREFIX='cluster_partition-'
CLUSTER_FILE_PREFIX='cluster_conf-'

KACONFIG_PATH = '/etc/kadeploy3'
KABACKUP_PATH = File.join(KACONFIG_PATH, 'configs.bak')

NEW_CONFIG = {
  :server_conf => File.join(KACONFIG_PATH, 'server_conf.yml'),
  :client_conf => File.join(KACONFIG_PATH, 'client_conf.yml'),
  :clusters_conf => File.join(KACONFIG_PATH, 'clusters.yml'),
  :cmds_conf => File.join(KACONFIG_PATH, 'cmd.yml'),
}

OLD_CONFIG = {
  :server_conf => File.join(KACONFIG_PATH, 'conf'),
  :client_conf => File.join(KACONFIG_PATH, 'client_conf'),
  :clusters_conf => File.join(KACONFIG_PATH, 'clusters'),
  :nodes_conf => File.join(KACONFIG_PATH, 'nodes'),
  :cmds_conf => File.join(KACONFIG_PATH, 'cmd'),
}

$clusters = nil
$nodes = nil


def cluster_partition_file(clname)
  File.join(KACONFIG_PATH,"partition_file_#{clname}")
end

def cluster_config_file(clname)
  File.join(KACONFIG_PATH,"specific_conf_#{clname}")
end

class String
  BOOLEAN_VALUES_TRUE=['true','yes']
  BOOLEAN_VALUES_FALSE=['false','no','none']

  def integer?
    true if Integer(self) rescue false
  end

  def float?
    true if Float(self) rescue false
  end

  def boolean?
    BOOLEAN_VALUES_TRUE.include?(self.downcase) or BOOLEAN_VALUES_FALSE.include?(self.downcase)
  end

  def to_b
    if BOOLEAN_VALUES_TRUE.include?(self.downcase)
      true
    elsif BOOLEAN_VALUES_FALSE.include?(self.downcase)
      false
    else
      nil
    end
  end
end

def parse_key_val(line)
  key,val = nil
  if line =~ /^\s*(\S+)\s*=\s*(.*)\s*$/
    key = Regexp.last_match(1)
    val = Regexp.last_match(2)
    if val.integer?
      val = val.to_i
    elsif val.float?
      val = val.to_f
    elsif val.boolean?
      val = val.to_b
    end
  end
  [key,val]
end


puts 'Starting migration'

FileUtils.mkdir_p(KABACKUP_PATH)
FileUtils.chown_R(KAUSER,KAGROUP,KABACKUP_PATH)

if File.exists?(OLD_CONFIG[:server_conf])
  tmp = File.read(OLD_CONFIG[:server_conf]).split("\n")
  config = {}
  tmp.each do |line|
    key,val = parse_key_val(line)
    config[key] = val if key
  end

  File.open(NEW_CONFIG[:server_conf],'w+') { |f| f.puts(config.to_yaml) }
  FileUtils.chown(KAUSER,KAGROUP,NEW_CONFIG[:server_conf])
  FileUtils.mv(OLD_CONFIG[:server_conf],KABACKUP_PATH)
  puts "  migration of '#{OLD_CONFIG[:server_conf]}' ok"
else
  puts "### file not found '#{OLD_CONFIG[:server_conf]}', ignored"
end

if File.exists?(OLD_CONFIG[:client_conf])
  tmp = File.read(OLD_CONFIG[:client_conf]).split("\n")
  config = {}
  tmp.each do |line|
    key,val = parse_key_val(line)
    config[key] = val if key
  end

  File.open(NEW_CONFIG[:client_conf],'w+') { |f| f.puts(config.to_yaml) }
  FileUtils.chown(KAUSER,KAGROUP,NEW_CONFIG[:client_conf])
  FileUtils.mv(OLD_CONFIG[:client_conf],KABACKUP_PATH)
  puts "  migration of '#{OLD_CONFIG[:client_conf]}' ok"
else
  puts "### file not found '#{OLD_CONFIG[:client_conf]}', ignored"
end

if File.exists?(OLD_CONFIG[:clusters_conf])
  $clusters = File.read(OLD_CONFIG[:clusters_conf]).split("\n")
  FileUtils.mv(OLD_CONFIG[:clusters_conf],KABACKUP_PATH)
else
  puts "### file not found '#{OLD_CONFIG[:clusters_conf]}', ignored"
end

if File.exists?(OLD_CONFIG[:nodes_conf])
  $nodes = File.read(OLD_CONFIG[:nodes_conf]).split("\n")
  $nodes.collect! { |node| node.split }
  FileUtils.mv(OLD_CONFIG[:nodes_conf],KABACKUP_PATH)
else
  puts "### file not found '#{OLD_CONFIG[:nodes_conf]}', ignored"
end

clconfig = {}
if $clusters and !$clusters.empty?
  $clusters.each do |cluster|
  puts "  migration of cluster '#{cluster}' config"
    clconfig[cluster] = {}

    old_partition_file = cluster_partition_file(cluster)
    new_partition_file = File.join(KACONFIG_PATH,"#{PARTITION_FILE_PREFIX}#{cluster}")

    if File.exists?(old_partition_file)
      FileUtils.cp(old_partition_file,new_partition_file)
      FileUtils.chown(KAUSER,KAGROUP,new_partition_file)
      FileUtils.mv(old_partition_file,KABACKUP_PATH)
      clconfig[cluster]['partition_file'] = new_partition_file
      puts "    migration of '#{old_partition_file}' ok"
    else
      puts "### file not found '#{old_partition_file}', ignored"
    end

    old_config_file = cluster_config_file(cluster)
    new_config_file = File.join(KACONFIG_PATH,"#{CLUSTER_FILE_PREFIX}#{cluster}.yml")
    if File.exists?(old_config_file)
      tmp = File.read(old_config_file).split("\n")
      config = {}
      config['macrosteps'] = {}
      tmp.each do |line|
        key,val = parse_key_val(line)
        if key == 'macrostep'
          macroname,macroval = val.split('|')
          macroinsts = macroval.split(',')
          macroinsts.each do |macroinst|
            macrotmp = macroinst.split(':')
            config['macrosteps'][macroname] = [] unless config['macrosteps'][macroname]
            config['macrosteps'][macroname] << {
              'type' => macrotmp[0],
              'retries' => macrotmp[1].to_i,
              'timeout' => macrotmp[2].to_i,
            }
          end
        else
          config[key] = val if key
        end
      end

      File.open(new_config_file,'w+') { |f| f.puts(config.to_yaml) }
      FileUtils.chown(KAUSER,KAGROUP,new_config_file)
      FileUtils.mv(old_config_file,KABACKUP_PATH)
      clconfig[cluster]['conf_file'] = new_config_file
      puts "    migration of '#{old_config_file}' ok"
    else
      puts "### file not found '#{old_partition_file}', ignored"
    end

    clconfig[cluster]['nodes'] = []
    if $nodes
      $nodes.each do |node|
        if node[2] == cluster
          clconfig[cluster]['nodes'] << {
            'name' => node[0],
            'address' => node[1],
          }
        end
      end
    end
    puts "    migration of nodes ok"
  end
  File.open(NEW_CONFIG[:clusters_conf],'w+') { |f| f.puts(clconfig.to_yaml) }
  FileUtils.chown(KAUSER,KAGROUP,NEW_CONFIG[:clusters_conf])
end

if File.exists?(OLD_CONFIG[:cmds_conf])
  cmdconfig = {}
  cmds = File.read(OLD_CONFIG[:cmds_conf]).split("\n")
  cmds.each do |cmd|
    tmp = cmd.split('|')
    node = tmp[0].strip
    cmdconfig[node] = {} if !$cmds[node]
    cmdconfig[node][tmp[1].strip] = tmp[2].strip
  end

  File.open(NEW_CONFIG[:cmds_conf],'w+') { |f| f.puts(cmdconfig.to_yaml) }
  FileUtils.chown(KAUSER,KAGROUP,NEW_CONFIG[:cmds_conf])
  FileUtils.mv(OLD_CONFIG[:cmds_conf],KABACKUP_PATH)
  puts "  migration of '#{OLD_CONFIG[:cmds_conf]}' ok"
else
  puts "### file not found '#{OLD_CONFIG[:cmds_conf]}', ignored"
end
