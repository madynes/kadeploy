#!/usr/bin/ruby

require 'ipaddr'
require 'resolv'
require 'optparse'

USAGE = "Usage: #{$0} [options] <network_address>\n"\
"Note: the network the nodes should take their IP into (CIDR or /mask notation : 10.0.0.0/24 or 10.0.0.0/255.255.255.0)"

NODENB = 4
NODENAME_PREFIX = 'node-'
MACADDR_START_VAL = '00:16:3E:00:00:00'

MACADDR_LENGTH = 12
MACADDR_GR_SEP = ':'

def int2mac(value)
  tmp = value.to_s(16)
  tmp.insert(0,(tmp.length >= MACADDR_LENGTH ? '' : '0' * (MACADDR_LENGTH - tmp.length)))
  (MACADDR_LENGTH/2 - 1).times { |i| tmp.insert((i+1)*2 + i,MACADDR_GR_SEP) }
  tmp.upcase
end

def mac2int(value)
  value.gsub(MACADDR_GR_SEP,'').to_i(16)
end

def ipv42int(value)
  iter=3
  ret=0
  tmp = value.split('.').collect do |i|
    ret |= (i.to_i << 8*iter)
    iter -= 1
  end
  ret
end

def int2ipv4(value)
  tmp = []
  3.downto(0) do |i|
    tmp << ((value >> 8*i) & 255)
  end
  tmp.join('.')
end

options = {}

options[:nodesnb] = NODENB
options[:host_list] = nil

optparse = OptionParser.new(USAGE) do |opts|
	opts.on( '-h', '--help', 'Display this screen' ) do
  		puts opts
  		exit
	end

	opts.on( '-f', '--host-list <nodelist_file>', 'Specify a file containing the list of hosts' ) do |h|
  	options[:host_list] = h
	end

	opts.on( '-n', '--nodes <number>', "The number of nodes per hosts (default: #{NODENB})" ) do |n|
  	options[:nodesnb] = n.to_i
	end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts e.to_s
  exit 1
end

if ARGV.size < 1
  puts USAGE
  exit 1
end

begin
  networkaddr = IPAddr.new(ARGV[0])
rescue ArgumentError
  puts "invalid network '#{ARGV[0]}'"
  exit 1
end

if options[:host_list]
  hostlist_file = options[:host_list]
elsif (ENV['GOOD_NODES'])
  hostlist_file = ENV['GOOD_NODES']
elsif (ENV['OAR_NODEFILE'])
  hostlist_file = ENV['OAR_NODEFILE']
else
  puts "hostlist parameter not set (see -f option)"
  exit 1
end

hostlist = []
begin
	File.open(hostlist_file, 'r') do |f|
    f.each do |line|
      hostlist << line.strip unless hostlist.include?(line.strip)
    end
  end
rescue Errno::ENOENT
	puts "File '#{nodelist_file}' not found"
  exit 1
end

hosts = []
tmp = networkaddr.to_range
exclips = [
  ipv42int(tmp.first.to_s),
  ipv42int(tmp.last.to_s)-1,
  ipv42int(tmp.last.to_s)
]

hostlist.each do |host|
  begin
    hostname = host
    hostip = Resolv.getaddress(hostname)
    tmp = ipv42int(hostip)
    unless networkaddr.include?(IPAddr.new(hostip))
      puts "host IP of '#{host}' (#{hostip}) not included in network #{ARGV[0]}"
      exit 1
    end

    hosts << {
      :hostname => hostname,
      :ipv4str => hostip,
      :ipv4int => tmp
    }
    exclips << tmp
  rescue
    puts "invalid address '#{hostname}'"
    exit 1
  end
end

if hosts.empty?
  puts "hostlist parameter empty"
  exit 1
end

iterip = networkaddr.succ.to_i
itermac = mac2int(MACADDR_START_VAL)

count=1
hosts.each do |host|
  iters = options[:nodesnb]
  while iters > 0 do
    unless exclips.include?(iterip)
      puts "#{NODENAME_PREFIX}#{count} #{int2ipv4(iterip)} #{int2mac(itermac)} #{host[:hostname]}"
      count += 1
      itermac += 1
      iters -= 1
    end

    iterip += 1
  end
end
