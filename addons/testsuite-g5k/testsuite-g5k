#!/usr/bin/ruby

$:.unshift File.dirname(__FILE__)

require 'common-g5k'

$clusters=nil
$nodes=nil
$walltime=nil
$oar = ''

LOGS_DIR=File.join(TESTSUITE_DIR,'logs')

vars = KADEPLOY_ENV_VARS.inject(''){|tmp,var| tmp << "  #{var} (default: #{self.class.const_get(var)})\n"}
usage = "usage: #{$0} <kind> [git:|gerrit:]<commit/branch> <version> [<sources dir>]\ncustomizable env vars:\n#{vars}\nsamples:\n  #{$0} master 3.1.8 (git is used by default)\n  #{$0} git:3.1.7 3.1.7 kadeploy3-sources/\n  #{$0} git:5f4b6c54949b0769596b10087c1d14150930d84f 7\n  #{$0} gerrit:refs/changes/27/1027/13 3.1.7"
opts = OptionParser::new do |opts|
  opts.summary_indent = "  "
  opts.summary_width = 28
  opts.program_name = $0
  opts.banner = usage
  opts.separator ""
  opts.separator "General options:"
  opts.on("-c","--clusters","Specify clusters number") { |c| $clusters = c }
  opts.on("-n","--nodes","Specify node number (by cluster)") { |n| $nodes = n }
  opts.on("-o","--oar","Specify OAR options") { |o| $oar = o }
  opts.on("-s","--sources","Specify kadeploy sources directory") { |s| $sources = s }
  opts.on("-w","--walltime",/^\d+$/,"Specify OAR walltime") { |w| $walltime = w }
end
opts.parse!(ARGV)
unless ARGV.size > 2
  $stderr.puts usage
  exit 1
end
$kind=ARGV[0]
$commit=ARGV[1]
$version=ARGV[2]
$clusters = 2 unless $clusters
$nodes = 2 unless $nodes
$walltime = 3 unless $walltime

$stderr.puts "kind must be 'test' or 'analyse'" unless ['test','analyse'].include?($kind)

cmd("mkdir -p #{LOGS_DIR}")

puts "Make the reservation"
vars = ''
KADEPLOY_ENV_VARS.each do |var|
  vars << " #{var}=\"#{ENV[var]}\"" if ENV[var]
end
env = (vars.empty? ? '' : "export #{vars};")
$commitfile = $commit.gsub('/','_').gsub(':','-')
ret=cmd("oarsub #{$OAR} -t deploy -t destructive -n #{$commitfile} -l {\"type='kavlan-local'\"}/vlan=1+cluster=#{$clusters}/nodes=#{$nodes},walltime=#{$walltime} '#{env} #{File.join(TESTSUITE_DIR,'run-testsuite')} #{$kind} #{$commit} #{$version} #{$sources}'")

$jobid=ret.split("\n").grep(/OAR_JOB_ID/)[0].split("=")[1]

cmd("echo \"#{$jobid}\" > #{LOGS_DIR}/#{$commitfile}.jobid")

trap('INT') {
  puts "Deleting OAR JOB"
  cmd("oardel #{$jobid}")
  exit 1
}

puts "Job ID: #{$jobid}"
puts "Wait for the job to terminate"
out = ''
begin
  sleep 20
  out = cmd("oarstat -s -j #{$jobid}")
end until [out].grep(/Terminated|Error/).size > 0

puts "Job done"
outfile = "#{LOGS_DIR}/#{$commitfile}.stdout"
cmd("mv OAR.#{$commitfile}.#{$jobid}.stdout #{outfile}")
errfile = "#{LOGS_DIR}/#{$commitfile}.stderr"
cmd("mv OAR.#{$commitfile}.#{$jobid}.stderr #{errfile}")

puts '=== STDOUT ==='
puts File.read(outfile) if File.readable?(outfile)
puts '=============='
puts ''
puts '=== STDERR ==='
puts File.read(errfile) if File.readable?(errfile)
puts "==============\n"

if cmd("oarstat -fj #{$jobid} | grep exit_code").strip.split(/\s+/)[2].to_i != 0
  puts 'Test Failed !'
  exit 1
else
  puts 'Test Successful !'
  exit 0
end
