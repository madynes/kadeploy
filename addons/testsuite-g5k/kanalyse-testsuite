#!/usr/bin/ruby -w

$:.unshift File.dirname(__FILE__)

require 'common-g5k'

unless ARGV.size >= 2
  vars = KADEPLOY_ENV_VARS.inject(''){|tmp,var| tmp << "  #{var} (default: #{self.class.const_get(var)})\n"}
  error("usage: #{$0} <frontend user@host>\ncustomizable env vars:\n#{vars}\nsamples:\n  #{$0} master 8 (git is used by default)\n  #{$0} git:3.1.7 7 test_config.yml kadeploy3-sources/\n  #{$0} git:5f4b6c54949b0769596b10087c1d14150930d84f 7\n  #{$0} gerrit:refs/changes/27/1027/13 7")
end

tmp=ARGV[1].split('@')
$user=tmp[0]
$host=tmp[1]
opts = ''

puts "Copying kanalyse"
bin = File.join('/tmp',File.basename(KANALYSE_BIN))
`mkdir -p #{ENV['OAR_JOB_ID']}`
ssh($user,$host,"mkdir -p #{TMP_DIR}")
scp($user,$host,KANALYSE_BIN,bin)
puts '... done'

puts "Run kanalyse"
stdout,stderr,status = ssh($user,$host,"#{bin} #{opts}",false)
puts '... done'
puts 'Failed !' unless status
puts "----------------" if !stdout.empty? or !stderr.empty?
puts "\t" + stdout.lines.to_a * "\t" unless stdout.empty?
puts "----------------" if !stdout.empty? and !stderr.empty?
puts "\t" + stderr.lines.to_a * "\t" unless stderr.empty?
puts "----------------" if !stdout.empty? or !stderr.empty?
puts '... done'

if status
  puts 'Copying results'
  scp($user,$host,TMP_DIR,ENV['OAR_JOB_ID'],true)
  puts '... done'
end

puts "\n\n"
if success
  puts 'Success'
  exit 0
else
  puts 'Fail'
  exit 1
end
